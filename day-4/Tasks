//================================================ Task 1 ================================================//

There’s a `<select>`:
`<select id="genres"><option value="rock">Rock</option><option value="blues" selected>Blues</option></select>`
Use JavaScript to:
1. Show the value and the text of the selected option.
2. Add an option: `<option value="classic">Classic</option>`.
3. Make it selected.

//================================================ my attempt ================================================//

<select id="genres">
<option value="rock">Rock</option>
<option value="blues" selected>Blues</option>
</select>
<script>
alert("value: " + genres.value + ", text: " + genres[genres.selectedIndex].text)
//alert(genres[genres.selectedIndex].text)
new Option("Classic", "classic", true, true)
</script>

//================================================ ideal solution ================================================//

<select id="genres">
<option value="rock">Rock</option>
<option value="blues" selected>Blues</option>
</select>
<script>
// 1)
let selectedOption = genres.options[genres.selectedIndex];
alert( selectedOption.value );
// 2)
let newOption = new Option("Classic", "classic");
genres.append(newOption);
// 3)
newOption.selected = true;
</script>

//================================================ Task 2 ================================================//

Create a `<div>` that turns into `<textarea>` when clicked.
The textarea allows to edit the HTML in the `<div>`.
When the user presses Enter or it loses focus, the `<textarea>` turns back into `<div>`, and its content becomes HTML in `<div>`
https://en.js.cx/task/editable-div/solution/
https://plnkr.co/edit/NFAJGdDJHcuYvHvN?p=preview

//================================================ my solution ================================================//

<!DOCTYPE HTML>
<html>

<head>
  <link type="text/css" rel="stylesheet" href="my.css">
  <meta charset="utf-8">
</head>

<body>

  <ul>
    <li>Click the div to edit.</li>
    <li>Enter or blur saves the result.</li>
  </ul>

  HTML is allowed.

  <!-- added tabindex as div can't be focused -->
  <div tabindex="1" id="view" class="view">Text</div>

  <script>
    // ...your code...
    // Note: <textarea> should have class="edit"
    // my.css has styles to make it the same size as div

    /*
    // Declaring view var
    var view = document.getElementById('view');
    view.onfocus = function() {
      // Create a textarea element
      var edit = document.createElement('textarea');
      // Assign a class to it
      edit.className = 'edit'; 
      // Copy the content from the div to the textarea
      edit.value = view.textContent;
      // Replace the div with the textarea
      view.parentNode.replaceChild(edit, view);
      edit.focus();
      edit.onblur = function() {
        // Create a div element (as it was removed)
        var newView = document.createElement('div');
        // Assign a class to it
        newView.className = 'view';
        // tabindex div
        newView.setAttribute('tabindex', '1');
        // Copy the content from the textarea to new div
        newView.textContent = edit.value;
        // Replace the textarea with new div
        edit.parentNode.replaceChild(newView, edit);
        // Reattach the focus handler
        newView.onfocus = arguments.callee;
      };
    };
    */


    // This function handles converting a <div> to a <textarea> on focus
    function makeEditable(event) {
      // 'view' is the <div> that was focused (i.e., clicked or tabbed into)
      var view = event.target;

      // Create a <textarea> element to replace the <div>
      var edit = document.createElement('textarea');
      edit.className = 'edit'; // Assign a class for styling (from your CSS)
      edit.value = view.textContent; // Populate <textarea> with current text from <div>

      // Replace the <div> with the <textarea> in the DOM
      view.parentNode.replaceChild(edit, view);

      // Automatically focus the <textarea> so the user can begin typing right away
      edit.focus();

      // Define what should happen when the user clicks away (onblur = loses focus)
      edit.onblur = function () {
        // Create a new <div> to replace the <textarea>
        var newView = document.createElement('div');
        newView.className = 'view'; // Keep the same class for styling
        newView.setAttribute('tabindex', '1'); // Make the new div focusable again

        // Instead of showing HTML as plain text, this interprets any tags entered
        newView.innerHTML = edit.value;

        // Reattach the same editing function so user can click to edit again
        newView.addEventListener('focus', makeEditable);

        // Replace the <textarea> with the new <div>
        edit.parentNode.replaceChild(newView, edit);
      };
    }

    // Attach the 'makeEditable' function to the initial div's focus event
    document.getElementById('view').addEventListener('focus', makeEditable);
  </script>

</body>
</html>

//================================================ given solution ================================================//

<!DOCTYPE HTML>
<html>

<head>
  <link type="text/css" rel="stylesheet" href="my.css">
  <meta charset="utf-8">
</head>

<body>

  <ul>
    <li>Click the div to edit.</li>
    <li>Enter or blur saves the result.</li>
  </ul>

  HTML is allowed.

  <div id="view" class="view">Text</div>

  <script>
    let area = null;
    let view = document.getElementById('view');

    view.onclick = function() {
      editStart();
    };

    function editStart() {
      area = document.createElement('textarea');
      area.className = 'edit';
      area.value = view.innerHTML;

      area.onkeydown = function(event) {
        if (event.key == 'Enter') {
          this.blur();
        }
      };

      area.onblur = function() {
        editEnd();
      };

      view.replaceWith(area);
      area.focus();
    }

    function editEnd() {
      view.innerHTML = area.value;
      area.replaceWith(view);
    }
  </script>

</body>
</html>

//================================================ Reflection on Task 2 ================================================//

I stuck to onfocus and onblur as that’s what I just read about and thought that was the best way to implement it
Given solution made use of onclick instead of tabindex’ing div
.replaceWith much cleaner than .parentNode.replaceChild(newView, edit);
Had an issue initially where, after HTML had been typed in the text area and this was converted to the div by clicking off/enter,
clicking back on didn’t show original HTML that was typed but the text product that is visible, due to using textContent
Therefore using .innerHTML fixed this issue
